---
title: Final Project- wrangling file
date: 2024-10-04
author: Amos Apreku
format: html
---

```{r}
library(httr2)
library(tidyr) 
library(janitor) 
library(stringr) 
library(ggplot2)
library(dplyr)
library(jsonlite)
library(purrr)
library(lubridate)
library(readr)
library(kableExtra)
library(DT)
library(ggrepel)
library(readxl)  
```

```{r}
source("census-key.R")

url <- "https://api.census.gov/data/2021/pep/population"
request <- request(url) |> req_url_query(get = I("POP_2020,POP_2021,NAME"),
                                         `for` = I("state:*"),
                                         key = census_key)
response <- request|> req_perform()
status<- resp_status(response)
status
content_type <- resp_content_type(response)
content_type
population <- as.matrix(resp_body_json(response, simplifyVector = TRUE))
population  
population <- population |> 
row_to_names(1) |> 
as_tibble() |> 
select(-state) |> 
rename(state_name = NAME) |> 
pivot_longer(-state_name, names_to = "year", values_to = "population") |> 
mutate(year = str_remove(year, "POP_")) |> 
mutate(across(-state_name, as.numeric)) |> 
mutate(state = state.abb[match(state_name, state.name)]) |> 
mutate(state = case_when(state_name == "Puerto Rico" ~ "PR", state_name == "District of Columbia" ~ "DC", .default = state)) 
population
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url, simplifyDataFrame = FALSE)

regions <- map_df(regions, function(x) {
  data.frame(region = x$region, 
             region_name = x$region_name,  # Fixed variable name here
             state_name = x$states, 
             stringsAsFactors = FALSE)  # Ensure strings are not factors
}) |>
  mutate(region_name = str_replace(region_name, 
                                   "New York and New Jersey, Puerto Rico, Virgin Islands", 
                                   "NY/NJ/PR/VI"))  
regions
population <- left_join(population, regions, by = "state_name") |>
  mutate(population = as.numeric(population))
population
```

Adding the rest of the years to the population data

```{r}
new_pop <- read_excel("../data/pop_2022_2023_2024.xlsx")
new_pop
```

```{r}
new_pop_long <- new_pop |>
  pivot_longer(
    cols = `2022`:`2024`, 
    names_to = "year", 
    values_to = "population"
  ) |>
  mutate(year = as.numeric(year)) 
new_pop_long

temp <- population %>% 
  dplyr::select(state_name, year, population) 
temp2 <- population %>%
  group_by(state_name) %>% 
  dplyr::slice(1) %>% 
  dplyr::select(c(state_name, state, region, region_name))

population <- rbind(temp, new_pop_long) %>% 
  arrange(state_name, year) %>% 
  left_join(temp2, by = c("state_name"))
```



The next phase is to get the data for cases, death, vaccines, and hospitalization


```{r}
source("funcs.R")

cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json")
hosp_raw <- get_cdc_data("https://data.cdc.gov/resource/39z2-9zu6.json")
deaths_raw <- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json")
vax_raw <- get_cdc_data("https://data.cdc.gov/resource/rh2h-3yt2.json")

```

```{r}
deaths_raw %>% 
  arrange(desc(year))
```


```{r}
#wrangling cases 
cases <- cases_raw |> mutate(cases = parse_number(new_cases),
date = as_date(ymd_hms(end_date))) |>
filter(state %in% population$state) |>
mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
select(state, mmwr_year, mmwr_week, cases) |>
arrange(state, mmwr_year, mmwr_week)
```

```{r}
#wrangling hospital
  
hosp <- hosp_raw |>
filter(jurisdiction %in% population$state) |>
rename(hosp = new_covid_19_hospital, state = jurisdiction) |>
mutate(hosp = parse_number(hosp),
date = as_date(ymd_hms(collection_date)),
mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
select(state, mmwr_year, mmwr_week, hosp) |>
group_by(state, mmwr_year, mmwr_week) |>
summarize(hosp = sum(hosp), n = n(), .groups = "drop") |>
filter(n == 7) |>
select(-n) |>
arrange(mmwr_year, mmwr_week)
```


```{r}
deaths <- deaths_raw |>
filter(state %in% population$state_name) |>
mutate(end_date = as_date(end_date),
mmwr_year = epiyear(end_date)) |>
rename(deaths_prov = covid_19_deaths,
flu = influenza_deaths) |>
mutate(mmwr_week = parse_number(mmwr_week),
deaths = parse_number(deaths_prov)) |>
select(state, mmwr_week, mmwr_year, deaths)

```



```{r}
vax <- vax_raw |> filter(date_type == "Admin" & location %in%
population$state) |>
rename(state = location, series_complete = series_complete_cumulative,
booster = booster_cumulative) |>
mutate(date = as_date(ymd_hms(date)),
mmwr_week = as.numeric(mmwr_week), mmwr_year = epiyear(date),
series_complete = parse_number(series_complete),
booster = parse_number(booster)) |>
select(state, date, mmwr_week, mmwr_year, series_complete, booster) |>
group_by(state, mmwr_week, mmwr_year) |>
summarize(series_complete = max(series_complete),
booster = max(booster),
.groups = "drop") |>
arrange(state, mmwr_year, mmwr_week)
```




```{r}
all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
make_date(2024, 12, 10),
by = "week")) |>
mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date))
dates_and_pop <- cross_join(all_dates, data.frame(state =
unique(population$state))) |> left_join(population, by = c("state",
"mmwr_year" = "year"))
```

```{r}
dates_and_pop %>% 
  left_join(deaths, by = c("state_name" = "state", "mmwr_week","mmwr_year")) %>% 
  filter(is.na(deaths))
```


```{r}
dat <- dates_and_pop |>
left_join(cases, by = c("state", "mmwr_week", "mmwr_year")) |>
left_join(hosp, by = c("state", "mmwr_week", "mmwr_year")) |>
left_join(deaths, by = c("state_name" = "state", "mmwr_week",
                         "mmwr_year")) |>
left_join(vax, by = c("state", "mmwr_week", "mmwr_year")) |>
arrange(state, date)

```

```{r}
saveRDS(dat, file = '../data/dat.rds')
```







